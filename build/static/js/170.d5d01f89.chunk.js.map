{"version":3,"file":"static/js/170.d5d01f89.chunk.js","mappings":"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","sources":["views/utilities/DepositHistory.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n  CircularProgress,\r\n  Grid,\r\n  Box,\r\n} from '@mui/material';\r\nimport axios from 'axios';\r\nimport { useAuth } from 'views/pages/authentication/AuthContext';\r\n\r\nconst DepositHistory = () => {\r\n  const { username } = useAuth(); // Get username from auth context\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchTransactions = async () => {\r\n      try {\r\n        if (!username) {\r\n          setError('No user is logged in.');\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        // Fetch all transaction data in one API call (create an aggregate endpoint in your API)\r\n        const response = await axios.get(`${process.env.REACT_APP_API_HOST}/api/user/transactions/${username}`);\r\n\r\n        // Combine and sort transactions\r\n        const combinedTransactions = response.data.map((item) => ({\r\n          _id: item._id,\r\n          createdAt: item.createdAt,\r\n          transactionAmount: item.transactionAmount,\r\n          type: item.type,\r\n          status: item.status || 'pending',\r\n          remarks: item.remarks || 'No remarks provided.',\r\n        }));\r\n\r\n        combinedTransactions.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n\r\n        setTransactions(combinedTransactions);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching deposit history:', error);\r\n        setError('Error fetching deposit history. Please try again.');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchTransactions();\r\n  }, [username]);\r\n\r\n  const getStatusStyles = (status) => {\r\n    switch (status) {\r\n      case 'approved':\r\n        return { backgroundColor: '#d4edda', color: '#155724' }; // Light green background\r\n      case 'rejected':\r\n        return { backgroundColor: '#f8d7da', color: '#721c24' }; // Light red background\r\n      case 'pending':\r\n        return { backgroundColor: '#fff3cd', color: '#856404' }; // Light yellow background\r\n      default:\r\n        return { backgroundColor: '#ffffff', color: '#000000' }; // Default white background\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={3} justifyContent=\"center\">\r\n      <Grid item xs={12}>\r\n        <Typography variant=\"h3\" gutterBottom sx={{ color: 'secondary.main', textAlign: 'center' }}>\r\n          Deposit History\r\n        </Typography>\r\n      </Grid>\r\n\r\n      <Grid item xs={12} sm={8}>\r\n        {loading ? (\r\n          <CircularProgress />\r\n        ) : error ? (\r\n          <Typography color=\"error\" variant=\"h6\">{error}</Typography>\r\n        ) : transactions.length === 0 ? (\r\n          <Typography variant=\"h6\">No transactions found.</Typography>\r\n        ) : (\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Date</TableCell>\r\n                  <TableCell>Type</TableCell>\r\n                  <TableCell>Amount</TableCell>\r\n                  <TableCell>Status</TableCell>\r\n                  <TableCell>Remarks</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {transactions.map((transaction) => (\r\n                  <TableRow key={transaction._id}>\r\n                    <TableCell>{new Date(transaction.createdAt).toLocaleDateString()}</TableCell>\r\n                    <TableCell>{transaction.type}</TableCell>\r\n                    <TableCell>Rs,{transaction.transactionAmount}</TableCell>\r\n                    <TableCell>\r\n                      <Box sx={{\r\n                        ...getStatusStyles(transaction.status),\r\n                        padding: '4px 8px',\r\n                        borderRadius: '4px',\r\n                        display: 'inline-block'\r\n                      }}>\r\n                        {transaction.status}\r\n                      </Box>\r\n                    </TableCell>\r\n                    <TableCell>{transaction.remarks || '-'}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default DepositHistory;\r\n"],"names":["DepositHistory","username","useAuth","transactions","setTransactions","useState","loading","setLoading","error","setError","useEffect","async","combinedTransactions","axios","data","map","item","_id","createdAt","transactionAmount","type","status","remarks","sort","a","b","Date","console","fetchTransactions","getStatusStyles","backgroundColor","color","_jsxs","Grid","container","spacing","justifyContent","children","_jsx","xs","Typography","variant","gutterBottom","sx","textAlign","sm","CircularProgress","length","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","transaction","toLocaleDateString","Box","padding","borderRadius","display"],"sourceRoot":""}