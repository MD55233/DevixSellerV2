{"version":3,"file":"static/js/861.e111cd76.chunk.js","mappings":"wRA2IA,UA1H6BA,KAC3B,MAAM,SAAEC,IAAaC,EAAAA,EAAAA,MACdC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,KAChCC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,KAEnCK,EAAAA,EAAAA,YAAU,KACaC,WACnB,IACE,MACEC,EACAC,EACAC,SACQC,QAAQC,IAAI,CAClBC,EAAAA,EAAAA,IAAW,4CAAuDhB,KAClEgB,EAAAA,EAAAA,IAAW,+CAA0DhB,KACrEgB,EAAAA,EAAAA,IAAW,8CAAyDhB,OAIlEiB,EAAkB,IACnBN,EAAuBO,KAAKC,KAAIC,IAAI,IAClCA,EACHC,KAAM,yBACNC,OAAQ,iBAEPV,EAAwBM,KAAKC,KAAIC,IAAI,IACnCA,EACHC,KAAM,0BACNC,OAAQ,kBAEPT,EAAwBK,KAAKC,KAAIC,IAAI,IACnCA,EACHC,KAAM,0BACNC,OAAQ,WACRC,QAASH,EAAKI,UAAY,4BAK9BP,EAAgBQ,MAAK,CAACC,EAAGC,IAAM,IAAIC,KAAKD,EAAEE,WAAa,IAAID,KAAKF,EAAEG,aAElE1B,EAAWc,GACXX,GAAW,EAKb,CAJE,MAAOC,GACPuB,QAAQvB,MAAM,yCAA0CA,GACxDC,EAAS,4DACTF,GAAW,EACb,GAGFyB,EAAc,GACb,CAAC/B,IAEJ,MAAMgC,EAAmBV,IACvB,OAAQA,GACN,IAAK,WACH,MAAO,CAAEW,gBAAiB,UAAWC,MAAO,WAC9C,IAAK,WACH,MAAO,CAAED,gBAAiB,UAAWC,MAAO,WAC9C,IAAK,UACH,MAAO,CAAED,gBAAiB,UAAWC,MAAO,WAC9C,QACE,MAAO,CAAED,gBAAiB,UAAWC,MAAO,WAChD,EAGF,OACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,eAAe,SAAQC,SAAA,EACjDC,EAAAA,EAAAA,KAACL,EAAAA,GAAI,CAAChB,MAAI,EAACsB,GAAI,GAAGF,UAChBC,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAACC,QAAQ,KAAKC,cAAY,EAACC,GAAI,CAAEZ,MAAO,iBAAkBa,UAAW,UAAWP,SAAC,8BAK9FC,EAAAA,EAAAA,KAACL,EAAAA,GAAI,CAAChB,MAAI,EAACsB,GAAI,GAAIM,GAAI,EAAER,SACtBnC,GACCoC,EAAAA,EAAAA,KAACQ,EAAAA,EAAgB,IACf1C,GACFkC,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAACT,MAAM,QAAQU,QAAQ,KAAIJ,SAAEjC,IACnB,IAAnBL,EAAQgD,QACVT,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAACC,QAAQ,KAAIJ,SAAC,gCAEzBC,EAAAA,EAAAA,KAACU,EAAAA,EAAc,CAACC,UAAWC,EAAAA,EAAMb,UAC/BL,EAAAA,EAAAA,MAACmB,EAAAA,EAAK,CAAAd,SAAA,EACJC,EAAAA,EAAAA,KAACc,EAAAA,EAAS,CAAAf,UACRL,EAAAA,EAAAA,MAACqB,EAAAA,EAAQ,CAAAhB,SAAA,EACPC,EAAAA,EAAAA,KAACgB,EAAAA,EAAS,CAAAjB,SAAC,UACXC,EAAAA,EAAAA,KAACgB,EAAAA,EAAS,CAAAjB,SAAC,UACXC,EAAAA,EAAAA,KAACgB,EAAAA,EAAS,CAAAjB,SAAC,YACXC,EAAAA,EAAAA,KAACgB,EAAAA,EAAS,CAAAjB,SAAC,YACXC,EAAAA,EAAAA,KAACgB,EAAAA,EAAS,CAAAjB,SAAC,kBAGfC,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CAAAlB,SACPtC,EAAQiB,KAAKwC,IACZxB,EAAAA,EAAAA,MAACqB,EAAAA,EAAQ,CAAAhB,SAAA,EACPC,EAAAA,EAAAA,KAACgB,EAAAA,EAAS,CAAAjB,SAAE,IAAIZ,KAAK+B,EAAM9B,WAAW+B,wBACtCnB,EAAAA,EAAAA,KAACgB,EAAAA,EAAS,CAAAjB,SAAEmB,EAAMtC,QAClBc,EAAAA,EAAAA,MAACsB,EAAAA,EAAS,CAAAjB,SAAA,CAAC,MAAImB,EAAME,mBAAqBF,EAAMG,WAChDrB,EAAAA,EAAAA,KAACgB,EAAAA,EAAS,CAAAjB,UACRC,EAAAA,EAAAA,KAACsB,EAAAA,EAAG,CAACjB,GAAI,IACJd,EAAgB2B,EAAMrC,QACzB0C,QAAS,UACTC,aAAc,MACdC,QAAS,gBACT1B,SACCmB,EAAMrC,YAGXmB,EAAAA,EAAAA,KAACgB,EAAAA,EAAS,CAAAjB,SAAEmB,EAAMpC,SAAW,QAdhBoC,EAAMQ,kBAsB5B,C","sources":["views/utilities/TrainingBonusHistory.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n  CircularProgress,\r\n  Grid,\r\n  Box,\r\n} from '@mui/material';\r\nimport axios from 'axios';\r\nimport { useAuth } from 'views/pages/authentication/AuthContext';\r\n\r\nconst TrainingBonusHistory = () => {\r\n  const { username } = useAuth(); // Get username from auth context\r\n  const [bonuses, setBonuses] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchBonuses = async () => {\r\n      try {\r\n        const [\r\n          pendingBonusesResponse,\r\n          approvedBonusesResponse,\r\n          rejectedBonusesResponse,\r\n        ] = await Promise.all([\r\n            axios.get(`${process.env.REACT_APP_API_HOST}/api/training-bonus/${username}`),\r\n            axios.get(`${process.env.REACT_APP_API_HOST}/api/approvals/approve/${username}`), // Approved bonuses\r\n            axios.get(`${process.env.REACT_APP_API_HOST}/api/approvals/reject/${username}`), // Rejected bonuses\r\n        ]);\r\n\r\n        // Combine all training bonus types into a single array\r\n        const combinedBonuses = [\r\n          ...pendingBonusesResponse.data.map(item => ({\r\n            ...item,\r\n            type: 'Pending Training Bonus',\r\n            status: 'pending',\r\n          })),\r\n          ...approvedBonusesResponse.data.map(item => ({\r\n            ...item,\r\n            type: 'Approved Training Bonus',\r\n            status: 'approved',\r\n          })),\r\n          ...rejectedBonusesResponse.data.map(item => ({\r\n            ...item,\r\n            type: 'Rejected Training Bonus',\r\n            status: 'rejected',\r\n            remarks: item.feedback || 'No feedback provided',\r\n          })),\r\n        ];\r\n\r\n        // Sort bonuses by date in descending order\r\n        combinedBonuses.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n\r\n        setBonuses(combinedBonuses);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching training bonus history:', error);\r\n        setError('Error fetching training bonus history. Please try again.');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchBonuses();\r\n  }, [username]);\r\n\r\n  const getStatusStyles = (status) => {\r\n    switch (status) {\r\n      case 'approved':\r\n        return { backgroundColor: '#d4edda', color: '#155724' }; // Light green background\r\n      case 'rejected':\r\n        return { backgroundColor: '#f8d7da', color: '#721c24' }; // Light red background\r\n      case 'pending':\r\n        return { backgroundColor: '#fff3cd', color: '#856404' }; // Light yellow background\r\n      default:\r\n        return { backgroundColor: '#ffffff', color: '#000000' }; // Default white background\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={3} justifyContent=\"center\">\r\n      <Grid item xs={12}>\r\n        <Typography variant=\"h3\" gutterBottom sx={{ color: 'secondary.main', textAlign: 'center' }}>\r\n          Training Bonus History\r\n        </Typography>\r\n      </Grid>\r\n\r\n      <Grid item xs={12} sm={8}>\r\n        {loading ? (\r\n          <CircularProgress />\r\n        ) : error ? (\r\n          <Typography color=\"error\" variant=\"h6\">{error}</Typography>\r\n        ) : bonuses.length === 0 ? (\r\n          <Typography variant=\"h6\">No training bonuses found.</Typography>\r\n        ) : (\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Date</TableCell>\r\n                  <TableCell>Type</TableCell>\r\n                  <TableCell>Amount</TableCell>\r\n                  <TableCell>Status</TableCell>\r\n                  <TableCell>Remarks</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {bonuses.map((bonus) => (\r\n                  <TableRow key={bonus._id}>\r\n                    <TableCell>{new Date(bonus.createdAt).toLocaleDateString()}</TableCell>\r\n                    <TableCell>{bonus.type}</TableCell>\r\n                    <TableCell>Rs,{bonus.transactionAmount || bonus.amount}</TableCell>\r\n                    <TableCell>\r\n                      <Box sx={{\r\n                        ...getStatusStyles(bonus.status),\r\n                        padding: '4px 8px',\r\n                        borderRadius: '4px',\r\n                        display: 'inline-block'\r\n                      }}>\r\n                        {bonus.status}\r\n                      </Box>\r\n                    </TableCell>\r\n                    <TableCell>{bonus.remarks || '-'}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default TrainingBonusHistory;\r\n"],"names":["TrainingBonusHistory","username","useAuth","bonuses","setBonuses","useState","loading","setLoading","error","setError","useEffect","async","pendingBonusesResponse","approvedBonusesResponse","rejectedBonusesResponse","Promise","all","axios","combinedBonuses","data","map","item","type","status","remarks","feedback","sort","a","b","Date","createdAt","console","fetchBonuses","getStatusStyles","backgroundColor","color","_jsxs","Grid","container","spacing","justifyContent","children","_jsx","xs","Typography","variant","gutterBottom","sx","textAlign","sm","CircularProgress","length","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","bonus","toLocaleDateString","transactionAmount","amount","Box","padding","borderRadius","display","_id"],"sourceRoot":""}